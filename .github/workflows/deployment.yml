name: Deploy to AWS

on:
  push:
    branches:
      - main  # Set your preferred branch for deployment (e.g., main or master)

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: aws-actions

    steps:
    # Step 1: Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2  # Set your AWS region
       # Step 3: Install MySQL Client (if you need to run DB initialization, uncomment it)
   
    - name: Install MySQL Client
      run: sudo apt-get install mysql-client -y  # Install MySQL client for running queries


    - name: Run SQL script on RDS
      # env:
      #     RDS_ENDPOINT: ${{ secrets.DB_HOST }}  # RDS endpoint
      #     DB_USER: ${{ secrets.DB_USER }}  # Database username
      #     DB_PASSWORD: ${{ secrets.DB_PASSWORD }}  # Database password
      #     DB_NAME: ${{ secrets.DB_NAME }}  # Database name
      run: |
          echo "Running SQL script..."
          mysql -h $RDS_ENDPOINT -u root -p${{ secrets.DB_PASSWORD }} ${{ secrets.DB_NAME }} < ./ELP_PATH_DB/elp_path_db_16.sql

    # Step 3: Set up JDK (for building the backend)
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Generate Gradle Wrapper
      working-directory: ./ELP_PATH_BE  # Adjust to your backend project directory
      run: gradle wrapper

    - name: Set Gradle Wrapper executable
      run: chmod +x ./ELP_PATH_BE/gradlew  # Ensure Gradle Wrapper has execute permissions

    - name: Build Backend with Gradle
      working-directory: ./ELP_PATH_BE  # Adjust to your backend project directory
      run: ./gradlew build --no-daemon

    # Step 5: Build the Frontend Application (if needed)
    - name: Build Frontend
      working-directory: ./ELP_PATH_FE  # Adjust to your frontend project directory
      run: npm install && npm run build --if-present

    # Step 6: Login to Amazon ECR
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    # Step 7: Build and Push Frontend Docker image to ECR
    - name: Build and Push Frontend Docker image
      run: |
        docker build -t angular-app ./ELP_PATH_FE  # Adjust path if needed
        docker tag angular-app:latest ${{ secrets.FRONTEND_REPO_URI }}:latest
        docker push ${{ secrets.FRONTEND_REPO_URI }}:latest

    # Step 8: Build and Push Backend Docker image to ECR
    - name: Build and Push Backend Docker image
      run: |
        docker build -t backend-app ./ELP_PATH_BE  # Adjust path to your backend Dockerfile directory
        docker tag backend-app:latest ${{ secrets.BACKEND_REPO_URI }}:latest
        docker push ${{ secrets.BACKEND_REPO_URI }}:latest

    # Step 9: Deploy ECS Service for Frontend
    - name: Deploy ECS frontend service
      run: |
        echo "Updating ECS Frontend Service..."
        FRONTEND_TASK_DEFINITION_ARN=${{ secrets.FRONTEND_TASK_DEFINITION_ARN }}
        aws ecs update-service --cluster frontend-cluster --service frontend-service --task-definition $FRONTEND_TASK_DEFINITION_ARN

    # Step 10: Deploy ECS Service for Backend
    - name: Deploy ECS backend service
      run: |
        echo "Updating ECS Backend Service..."
        BACKEND_TASK_DEFINITION_ARN=${{ secrets.BACKEND_TASK_DEFINITION_ARN }}
        aws ecs update-service --cluster backend-cluster --service backend-service --task-definition $BACKEND_TASK_DEFINITION_ARN

    # Step 11: Verify ECS services are running
    - name: Verify ECS services
      run: |
        aws ecs describe-services --cluster frontend-cluster --services frontend-service
        aws ecs describe-services --cluster backend-cluster --services backend-service 

